# files.if

########################################
## <summary>
##      Do not audit attempts to set the attributes
##      of non security files.
## </summary>
## <param name="domain">
##      <summary>
##      Domain to not audit.
##      </summary>
## </param>
#
interface(`files_dontaudit_setattr_non_security_files',`
        gen_require(`
                attribute non_security_file_type;
        ')

        dontaudit $1 non_security_file_type:file setattr;
')

########################################
## <summary>
##      Do not audit attempts to set the attributes
##      of non security directories.
## </summary>
## <param name="domain">
##      <summary>
##      Domain to not audit.
##      </summary>
## </param>
#
interface(`files_dontaudit_setattr_non_security_dirs',`
        gen_require(`
                attribute non_security_file_type;
        ')

        dontaudit $1 non_security_file_type:dir setattr;
')

########################################
## <summary>
##      Do not audit listing of the var directory (/var).
## </summary>
## <param name="domain">
##      <summary>
##      Domain to not audit.
##      </summary>
## </param>
#
interface(`files_dontaudit_list_var',`
        gen_require(`
                type var_t;
        ')

        dontaudit $1 var_t:dir list_dir_perms;
')

# apache.if

########################################
## <summary>
##      Allow any httpd_exec_t to be an entrypoint of this domain
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
## <rolecap/>
#
interface(`apache_entrypoint',`
        gen_require(`
                type httpd_exec_t;
        ')
        allow $1 httpd_exec_t:file entrypoint;
')

# ssh.if
########################################
## <summary>
##      Read and write inherited sshd pty type.  
## </summary>
## <param name="domain">
##      <summary>
##      Domain to not audit.
##      </summary>
## </param>
#
interface(`ssh_use_ptys',`
        gen_require(`
                type sshd_devpts_t;
        ')

        allow $1 sshd_devpts_t:chr_file { getattr open read write ioctl };
')

########################################
## <summary>
##      Do not audit attempts to read and
##      write the sshd pty type.  
## </summary>
## <param name="domain">
##      <summary>
##      Domain to not audit.
##      </summary>
## </param>
#
interface(`ssh_dontaudit_use_ptys',`
        gen_require(`
                type sshd_devpts_t;
        ')

        dontaudit $1 sshd_devpts_t:chr_file { getattr read write ioctl };
')


# postfix.if
#######################################
## <summary>
##  Allow read/write postfix public pipes
##  TCP sockets.
## </summary>
## <param name="domain">
##  <summary>
##  Domain allowed access.
##  </summary>
## </param>
#
interface(`postfix_rw_public_pipes',`
    gen_require(`
        type postfix_public_t;
    ')

    allow $1 postfix_public_t:fifo_file rw_fifo_file_perms;
')

#######################################
## <summary>
##  Create, read, write, and delete postfix maildrop spool files.
## </summary>
## <param name="domain">
##  <summary>
##  Domain allowed access.
##  </summary>
## </param>
#
interface(`postfix_manage_spool_maildrop_files',`
    gen_require(`
        type postfix_spool_maildrop_t;
    ')

    files_search_spool($1)
    manage_dirs_pattern($1, postfix_spool_maildrop_t, postfix_spool_maildrop_t)
    manage_files_pattern($1, postfix_spool_maildrop_t, postfix_spool_maildrop_t)
')

# passenger.if
######################################
## <summary>
##      Execute passenger in the current domain.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed to transition.
##      </summary>
## </param>
#
interface(`passenger_exec',`
        gen_require(`
                type passenger_exec_t;
        ')

        can_exec($1, passenger_exec_t)
')

########################################
## <summary>
##      Manage passenger lib files
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`passenger_manage_lib_files',`
        gen_require(`
                type passenger_var_lib_t;
        ')

        manage_dirs_pattern($1, passenger_var_lib_t, passenger_var_lib_t)
        manage_files_pattern($1, passenger_var_lib_t, passenger_var_lib_t)
        manage_lnk_files_pattern($1, passenger_var_lib_t, passenger_var_lib_t)
        files_search_var_lib($1)
')

########################################
## <summary>
##      Connect to passenger unix stream socket.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`passenger_stream_connect',`
        gen_require(`
                type passenger_t;
        ')

        allow $1 passenger_t:unix_stream_socket connectto;
')

#######################################
## <summary>
##  Allow to manage passenger tmp files/dirs.
## </summary>
## <param name="domain">
##  <summary>
##  Domain allowed access.
##  </summary>
## </param>
#
interface(`passenger_manage_tmp_files',`
    gen_require(`
        type passenger_tmp_t;
    ')

    files_search_tmp($1)
        manage_files_pattern($1, passenger_tmp_t, passenger_tmp_t)
        manage_dirs_pattern($1, passenger_tmp_t, passenger_tmp_t)
')

# filesystem.if
########################################
## <summary>
##      Read and write generic tmpfs files.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`fs_rw_inherited_tmpfs_files',`
        gen_require(`
                type tmpfs_t;
        ')

        allow $1 tmpfs_t:file { read write };
')

# miscfiles.if
########################################
## <summary>
##      Read generic SSL certificates.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
## <rolecap/>
#
interface(`miscfiles_read_generic_certs',`
        gen_require(`
                type cert_t;
        ')

        allow $1 cert_t:dir list_dir_perms;
        read_files_pattern($1, cert_t, cert_t)
        read_lnk_files_pattern($1, cert_t, cert_t)
')
