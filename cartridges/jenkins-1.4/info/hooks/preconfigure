#!/bin/bash

# Executes before configure.  Gives opportunity to make any callbacks to the broker before configure runs.  

# Exit on any errors
set -e

while getopts 'd' OPTION
do
    case $OPTION in
        d) set -x
        ;;
        ?) print_help
        ;;
    esac
done


[ $# -eq 3 ] || print_help

function generate_ssh_keys {
    /bin/mkdir -p $APP_HOME/app/data/.ssh/
    /usr/bin/ssh-keygen -N '' -f $APP_HOME/app/data/.ssh/jenkins_id_rsa > /dev/null

    /bin/chown root.$uuid -R "$APP_HOME/app/data/.ssh/"
    chmod 0750 "$APP_HOME/app/data/.ssh/"
    chmod 0640 "$APP_HOME/app/data/.ssh/jenkins_id_rsa"
    chmod 0640 "$APP_HOME/app/data/.ssh/jenkins_id_rsa.pub"
    observe_setup_var_lib_dir "$APP_HOME/app/data/.ssh/"
}

cartridge_type="jenkins-1.4"
source "/etc/stickshift/stickshift-node.conf"
source ${CARTRIDGE_BASE_PATH}/abstract/info/lib/util

setup_configure "$1" $2 $3

check_cartridge_dir_doesnt_exist

#
# Setup the base of the application
#
create_cartridge_instance_dir "$cartridge_type"
create_app_dir_symlink "$cartridge_type"
JENKINS_INSTANCE_DIR=$(get_cartridge_instance_dir "$cartridge_type")
pushd "$JENKINS_INSTANCE_DIR" > /dev/null
create_standard_app_dirs
mkdir logs
popd > /dev/null

#
# Generate key pair
#
generate_ssh_keys

public_key=$(cat $APP_HOME/app/data/.ssh/jenkins_id_rsa.pub)
set -- $public_key
add_ssh_key "$2"

add_broker_auth_key
